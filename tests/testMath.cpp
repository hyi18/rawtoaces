// SPDX-License-Identifier: Apache-2.0
// Copyright Contributors to the rawtoaces Project.

#ifdef WIN32
#    define WIN32_LEAN_AND_MEAN
#    include <windows.h>
#    undef RGB
#endif

#include <OpenImageIO/unittest.h>

#include "../src/rawtoaces_core/mathOps.h"

using namespace rta::core;

void test_IsSquare()
{
    vector<vector<double>> a;
    a.resize( 2 );
    for ( int i = 0; i < 2; i++ )
        a[i].resize( 2 );
    OIIO_CHECK_EQUAL( isSquare( a ), 1 );

    for ( int i = 0; i < 2; i++ )
        a[i].resize( 1 );
    OIIO_CHECK_EQUAL( isSquare( a ), 0 );
}

void test_AddVectors()
{

    double a[5] = { 1.0, 2.0, 3.0, 4.0, 5.0 };
    double b[5] = { 5.0, 4.0, 3.0, 2.0, 1.0 };
    double c[5] = { 6.0, 6.0, 6.0, 6.0, 6.0 };

    vector<double> av( a, a + 5 );
    vector<double> bv( b, b + 5 );
    vector<double> cv = addVectors( av, bv );

    for ( int i = 0; i < 5; i++ )
        OIIO_CHECK_EQUAL_THRESH( cv[i], c[i], 1e-9 );
}

void test_SubVectors()
{

    double a[5] = { 5.0, 4.0, 3.0, 2.0, 1.0 };
    double b[5] = { 5.0, 4.0, 3.0, 2.0, 1.0 };
    double c[5] = { 0.0, 0.0, 0.0, 0.0, 0.0 };

    vector<double> av( a, a + 5 );
    vector<double> bv( b, b + 5 );
    vector<double> cv = subVectors( av, bv );

    for ( int i = 0; i < 5; i++ )
        OIIO_CHECK_EQUAL_THRESH( cv[i], c[i], 1e-9 );
}

void test_Cross2()
{
    double a[2] = { 1.0, 3.0 };
    double b[2] = { 1.0, 6.5 };

    vector<double> av( a, a + 2 );
    vector<double> bv( b, b + 2 );

    double cross2_test = cross2d_scalar( av, bv );
    OIIO_CHECK_EQUAL_THRESH( cross2_test, 3.50, 1e-5 );
}

void test_InvertVM()
{
    double M[3][3]         = { { 0.0188205, 8.59E-03, 9.58E-03 },
                               { 0.0440222, 0.0166118, 0.0258734 },
                               { 0.1561591, 0.046321, 0.1181466 } };
    double M_Inverse[3][3] = { { -844.264597, 631.004958, -69.728531 },
                               { 1282.403375, -803.858096, 72.055546 },
                               { 613.114494, -518.860936, 72.376689 } };

    vector<vector<double>> MV( 3, vector<double>( 3 ) );
    for ( size_t i = 0; i < 3; i++ )
        for ( size_t j = 0; j < 3; j++ )
            MV[i][j] = M[i][j];

    vector<vector<double>> MV_Inverse = invertVM( MV );

    for ( int i = 0; i < 3; i++ )
    {
        OIIO_CHECK_EQUAL_THRESH( MV_Inverse[i][0], M_Inverse[i][0], 1e-5 );
        OIIO_CHECK_EQUAL_THRESH( MV_Inverse[i][1], M_Inverse[i][1], 1e-5 );
        OIIO_CHECK_EQUAL_THRESH( MV_Inverse[i][2], M_Inverse[i][2], 1e-5 );
    }
}

void test_InvertV()
{
    double V[9] = { 0.0188205, 8.59E-03,  9.58E-03, 0.0440222, 0.0166118,
                    0.0258734, 0.1561591, 0.046321, 0.1181466 };
    double V_Inverse[9] = { -844.264597, 631.004958,  -69.728531,
                            1282.403375, -803.858096, 72.055546,
                            613.114494,  -518.860936, 72.376689 };

    vector<double> MV( V, V + 9 );
    vector<double> MV_Inverse = invertV( MV );

    for ( int i = 0; i < 9; i++ )
        OIIO_CHECK_EQUAL_THRESH( V_Inverse[i], MV_Inverse[i], 1e-5 );
}

void test_DiagV()
{
    double         v[3]  = { 1.0, 2.0, 3.0 };
    double         vd[9] = { 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0 };
    vector<double> VV( v, v + 3 );
    vector<double> DV = diagV( VV );

    for ( int i = 0; i < 9; i++ )
    {
        OIIO_CHECK_EQUAL_THRESH( DV[i], vd[i], 1e-5 );
    }
}

void test_TransposeVec()
{
    double M[6][3] = {
        { 1.0, 0.0, 0.0 }, { 0.0, 2.0, 0.0 }, { 0.0, 0.0, 3.0 },
        { 1.0, 1.0, 2.0 }, { 2.0, 2.0, 3.0 }, { 3.0, 3.0, 4.0 }
    };

    double MT[3][6] = { { 1.0000000000,
                          0.0000000000,
                          0.0000000000,
                          1.0000000000,
                          2.0000000000,
                          3.0000000000 },
                        { 0.0000000000,
                          2.0000000000,
                          0.0000000000,
                          1.0000000000,
                          2.0000000000,
                          3.0000000000 },
                        { 0.0000000000,
                          0.0000000000,
                          3.0000000000,
                          2.0000000000,
                          3.0000000000,
                          4.0000000000 } };

    vector<vector<double>> MV( 6, vector<double>( 3 ) );
    for ( size_t i = 0; i < 6; i++ )
        for ( size_t j = 0; j < 3; j++ )
            MV[i][j] = M[i][j];
    vector<vector<double>> MVT = transposeVec( MV );

    for ( size_t i = 0; i < 3; i++ )
        for ( size_t j = 0; j < 6; j++ )
            OIIO_CHECK_EQUAL_THRESH( MVT[i][j], MT[i][j], 1e-5 );
}

void test_SumVector()
{
    double M[10] = { 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0 };
    vector<double> MV( M, M + 10 );

    double sum = sumVector( MV );
    OIIO_CHECK_EQUAL_THRESH( sum, 55.0000, 1e-5 );
}

void test_MulVectorElement()
{
    double M1[10] = { 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0 };
    double M2[10] = { 10.0000000000, 5.0000000000, 3.3333333333, 2.5000000000,
                      2.0000000000,  1.6666666667, 1.4285714286, 1.2500000000,
                      1.1111111111,  1.0000000000 };
    vector<double> MV1( M1, M1 + 10 );
    vector<double> MV2( M2, M2 + 10 );

    vector<double> MV3 = mulVectorElement( MV1, MV2 );
    for ( size_t i = 0; i < MV3.size(); i++ )
        OIIO_CHECK_EQUAL_THRESH( MV3[i], 10.0000000000, 1e-5 );
}

void test_MulVector1()
{
    double M1[3][3] = { { 1.0, 0.0, 0.0 },
                        { 0.0, 2.0, 0.0 },
                        { 0.0, 0.0, 3.0 } };
    double M2[3][3] = { { 1.0000000000, 0.0000000000, 0.0000000000 },
                        { 0.0000000000, 0.5000000000, 0.0000000000 },
                        { 0.0000000000, 0.0000000000, 0.3333333333 }

    };
    double M3[3][3] = { { 1.0000000000, 0.0000000000, 0.0000000000 },
                        { 0.0000000000, 1.0000000000, 0.0000000000 },
                        { 0.0000000000, 0.0000000000, 1.0000000000 }

    };

    vector<vector<double>> MV1( 3, vector<double>( 3 ) );
    vector<vector<double>> MV2( 3, vector<double>( 3 ) );
    for ( size_t i = 0; i < 3; i++ )
        for ( size_t j = 0; j < 3; j++ )
        {
            MV1[i][j] = M1[i][j];
            MV2[i][j] = M2[i][j];
        }

    vector<vector<double>> MV3 = mulVector( MV1, MV2 );
    for ( size_t i = 0; i < 3; i++ )
        for ( size_t j = 0; j < 3; j++ )
            OIIO_CHECK_EQUAL_THRESH( MV3[i][j], M3[i][j], 1e-5 );
}

void test_MulVector2()
{
    double M1[3][3] = { { 1.0000000000, 0.0000000000, 0.0000000000 },
                        { 0.0000000000, 0.5000000000, 0.0000000000 },
                        { 0.0000000000, 0.0000000000, 0.3333333333 }

    };
    double M2[3] = { 1.0000000000, 0.0000000000, 0.0000000000 };

    vector<vector<double>> MV1( 3, vector<double>( 3 ) );
    vector<double>         MV2( M2, M2 + 3 );
    for ( size_t i = 0; i < 3; i++ )
        for ( size_t j = 0; j < 3; j++ )
        {
            MV1[i][j] = M1[i][j];
        }

    vector<double> MV3 = mulVector( MV1, MV2 );
    for ( int i = 0; i < 3; i++ )
        OIIO_CHECK_EQUAL_THRESH( MV3[i], M2[i], 1e-5 );
}

void test_FindIndexInterp1()
{
    int M[100];
    for ( size_t i = 0; i < sizeof( M ) / sizeof( int ); i++ )
        M[i] = static_cast<int>( i * 2 );

    vector<int> MV( M, M + 100 );

    int index = findIndexInterp1( 100, MV, (int)MV.size() );
    OIIO_CHECK_EQUAL( index, 50 );
}

void test_Interp1DLinear()
{
    int    X0[100], X1[100];
    double Y0[100];

    double Y1[100] = {
        0.0000000000,   7.0000000000,   14.0000000000,  21.0000000000,
        28.0000000000,  35.0000000000,  42.0000000000,  49.0000000000,
        56.0000000000,  63.0000000000,  70.0000000000,  77.0000000000,
        84.0000000000,  91.0000000000,  98.0000000000,  105.0000000000,
        112.0000000000, 119.0000000000, 126.0000000000, 133.0000000000,
        140.0000000000, 147.0000000000, 154.0000000000, 161.0000000000,
        168.0000000000, 175.0000000000, 182.0000000000, 189.0000000000,
        196.0000000000, 203.0000000000, 210.0000000000, 217.0000000000,
        224.0000000000, 231.0000000000, 238.0000000000, 245.0000000000,
        252.0000000000, 259.0000000000, 266.0000000000, 273.0000000000,
        280.0000000000, 287.0000000000, 294.0000000000, 301.0000000000,
        308.0000000000, 315.0000000000, 322.0000000000, 329.0000000000,
        336.0000000000, 343.0000000000, 350.0000000000, 357.0000000000,
        364.0000000000, 371.0000000000, 378.0000000000, 385.0000000000,
        392.0000000000, 399.0000000000, 406.0000000000, 413.0000000000,
        420.0000000000, 427.0000000000, 434.0000000000, 441.0000000000,
        448.0000000000, 455.0000000000, 462.0000000000, 469.0000000000,
        476.0000000000, 483.0000000000, 490.0000000000, 497.0000000000,
        504.0000000000, 511.0000000000, 518.0000000000, 525.0000000000,
        532.0000000000, 539.0000000000, 546.0000000000, 553.0000000000,
        560.0000000000, 567.0000000000, 574.0000000000, 581.0000000000,
        588.0000000000, 595.0000000000, 602.0000000000, 609.0000000000,
        616.0000000000, 623.0000000000, 630.0000000000, 637.0000000000,
        644.0000000000, 651.0000000000, 658.0000000000, 665.0000000000,
        672.0000000000, 679.0000000000, 686.0000000000, 693.0000000000
    };

    for ( int i = 0; i < 100; i++ )
    {
        X0[i] = i;
        X1[i] = i * 2;
        Y0[i] = i * 3.5;
    }

    vector<int>    XV0( X0, X0 + 100 );
    vector<int>    XV1( X1, X1 + 100 );
    vector<double> YV0( Y0, Y0 + 100 );

    vector<double> YV1 = interp1DLinear( XV0, XV1, YV0 );

    for ( size_t i = 0; i < YV1.size(); i++ )
        OIIO_CHECK_EQUAL_THRESH( YV1[i], Y1[i], 1e-5 );
}

void testIDT_XytoXYZ()
{
    double         xy[3] = { 0.7347, 0.2653 };
    vector<double> XYZV  = xy_to_XYZ( vector<double>( xy, xy + 2 ) );

    for ( int i = 0; i < 3; i++ )
    {
        OIIO_CHECK_EQUAL_THRESH( XYZV[i], XYZV[i], 1e-5 );
    }
}

void testIDT_Uvtoxy()
{
    double         uv[2] = { 0.7347, 0.2653 };
    double         xy[2] = { 0.658530026, 0.158530026 };
    vector<double> xyV   = uv_to_xy( vector<double>( uv, uv + 2 ) );

    for ( int i = 0; i < 2; i++ )
    {
        OIIO_CHECK_EQUAL_THRESH( xy[i], xyV[i], 1e-5 );
    }
}

void testIDT_UvtoXYZ()
{
    double         uv[2]  = { 0.7347, 0.2653 };
    double         XYZ[3] = { 0.658530026, 0.158530026, 0.18293995 };
    vector<double> XYZV   = uv_to_XYZ( vector<double>( uv, uv + 2 ) );

    for ( int i = 0; i < 3; i++ )
    {
        OIIO_CHECK_EQUAL_THRESH( XYZ[i], XYZV[i], 1e-5 );
    }
}

void testIDT_XYZTouv()
{
    double         XYZ[3] = { 0.658530026, 0.158530026, 0.18293995 };
    double         uv[2]  = { 0.7347, 0.2653 };
    vector<double> uvV    = XYZ_to_uv( vector<double>( XYZ, XYZ + 3 ) );

    for ( int i = 0; i < 2; i++ )
    {
        OIIO_CHECK_EQUAL_THRESH( uv[i], uvV[i], 1e-5 );
    }
}

void testIDT_GetCAT()
{
    vector<double> dIV( d50_white_point_XYZ, d50_white_point_XYZ + 3 );
    vector<double> dOV( d60_white_point_XYZ, d60_white_point_XYZ + 3 );

    vector<vector<double>> CAT_test = calculate_CAT( dIV, dOV );

    float CAT[3][3] = { { 0.9711790957f, -0.0217386019f, 0.0460288393f },
                        { -0.0156935400f, 1.0000112293f, 0.0183278569f },
                        { 0.0009710255f, 0.0030856714f, 1.2179433335f } };

    for ( int i = 0; i < 3; i++ )
    {
        OIIO_CHECK_EQUAL_THRESH( CAT[i][0], CAT_test[i][0], 1e-5 );
        OIIO_CHECK_EQUAL_THRESH( CAT[i][1], CAT_test[i][1], 1e-5 );
        OIIO_CHECK_EQUAL_THRESH( CAT[i][2], CAT_test[i][2], 1e-5 );
    }
}

void test_XYZtoLAB()
{
    vector<vector<double>> XYZ( 190, ( vector<double>( 3 ) ) );
    for ( size_t i = 0; i < 190; i++ )
        for ( size_t j = 0; j < 3; j++ )
            XYZ[i][j] = 116.0 / static_cast<double>( i * j + 1 );
    vector<vector<double>> LAB_test = XYZ_to_LAB( XYZ );

    double LAB[190][3] = {
        { 549.7318794845, 39.7525650490, 2.8525942657 },
        { 433.0216903128, 542.8137252717, 99.8487635895 },
        { 376.2565769002, 787.4909382574, 107.5553913209 },
        { 340.3887517796, 942.0936327427, 106.0565773198 },
        { 314.8420101370, 1052.2088984432, 102.8653327418 },
        { 295.3342514064, 1136.2940653857, 99.4828753761 },
        { 279.7408424200, 1203.5070351548, 96.2830462389 },
        { 266.8659397423, 1259.0023053173, 93.3513288970 },
        { 255.9755200319, 1305.9437695860, 90.6888916250 },
        { 246.5894774634, 1346.4008496227, 88.2724087395 },
        { 238.3781223058, 1381.7946218537, 86.0733912032 },
        { 231.1061590981, 1413.1392908524, 84.0645504683 },
        { 224.6003205069, 1441.1816985733, 82.2216757048 },
        { 218.7296621837, 1466.4862603111, 80.5239147935 },
        { 213.3930377573, 1489.4889518040, 78.9535102240 },
        { 208.5108451564, 1510.5328854287, 77.4953842451 },
        { 204.0194181531, 1529.8924845807, 76.1367195382 },
        { 199.8671133041, 1547.7903503092, 74.8665849494 },
        { 196.0115162406, 1564.4093031692, 73.6756179751 },
        { 192.4174063806, 1579.9011560141, 72.5557615054 },
        { 189.0552473778, 1594.3932206812, 71.5000477359 },
        { 185.9000494730, 1607.9932116504, 70.5024214008 },
        { 182.9304997360, 1620.7929949995, 69.5575951351 },
        { 180.1282884501, 1632.8714919215, 68.6609308486 },
        { 177.4775812373, 1644.2969540454, 67.8083420912 },
        { 174.9646009382, 1655.1287656794, 66.9962133575 },
        { 172.5772931615, 1665.4188854067, 66.2213330886 },
        { 170.3050563393, 1675.2130096405, 65.4808377844 },
        { 168.1385220283, 1684.5515196015, 64.7721651640 },
        { 166.0693747251, 1693.4702579775, 64.0930147262 },
        { 164.0902030303, 1702.0011704552, 63.4413143888 },
        { 162.1943758898, 1710.1728391642, 62.8151921449 },
        { 160.3759390489, 1718.0109289957, 62.2129518785 },
        { 158.6295279149, 1725.5385631940, 61.6330526428 },
        { 156.9502938300, 1732.7766411460, 61.0740908367 },
        { 155.3338413722, 1739.7441086367, 60.5347848137 },
        { 153.7761747781, 1746.4581887834, 60.0139615444 },
        { 152.2736519549, 1752.9345802629, 59.5105450167 },
        { 150.8229448358, 1759.1876281899, 59.0235461141 },
        { 149.4210050685, 1765.2304720144, 58.5520537555 },
        { 148.0650342035, 1771.0751740188, 58.0952271147 },
        { 146.7524576996, 1776.7328313633, 57.6522887685 },
        { 145.4809021793, 1782.2136741231, 57.2225186450 },
        { 144.2481754629, 1787.5271513490, 56.8052486639 },
        { 143.0522489866, 1792.6820068503, 56.3998579783 },
        { 141.8912422747, 1797.6863461256, 56.0057687388 },
        { 140.7634091867, 1802.5476956428, 55.6224423136 },
        { 139.6671257032, 1807.2730554857, 55.2493759088 },
        { 138.6008790506, 1811.8689462295, 54.8860995378 },
        { 137.5632579942, 1816.3414507830, 54.5321733006 },
        { 136.5529441525, 1820.6962518246, 54.1871849329 },
        { 135.5687042090, 1824.9386653743, 53.8507475973 },
        { 134.6093829120, 1829.0736709648, 53.5224978866 },
        { 133.6738967709, 1833.1059388143, 53.2020940157 },
        { 132.7612283671, 1837.0398543482, 52.8892141826 },
        { 131.8704212100, 1840.8795403702, 52.5835550788 },
        { 131.0005750776, 1844.6288771477, 52.2848305341 },
        { 130.1508417878, 1848.2915206382, 51.9927702809 },
        { 129.3204213540, 1851.8709190595, 51.7071188264 },
        { 128.5085584849, 1855.3703279783, 51.4276344215 },
        { 127.7145393913, 1858.7928240716, 51.1540881167 },
        { 126.9376888697, 1862.1413176990, 50.8862628962 },
        { 126.1773676342, 1865.4185644038, 50.6239528829 },
        { 125.4329698711, 1868.6271754515, 50.3669626079 },
        { 124.7039209964, 1871.7696274979, 50.1151063375 },
        { 123.9896755940, 1874.8482714734, 49.8682074530 },
        { 123.2897155206, 1877.8653407552, 49.6260978785 },
        { 122.6035481584, 1880.8229586960, 49.3886175524 },
        { 121.9307048041, 1883.7231455678, 49.1556139376 },
        { 121.2707391820, 1886.5678249737, 48.9269415694 },
        { 120.6232260677, 1889.3588297766, 48.7024616350 },
        { 119.9877600160, 1892.0979075858, 48.4820415841 },
        { 119.3639541807, 1894.7867258413, 48.2655547669 },
        { 118.7514392210, 1897.4268765298, 48.0528800977 },
        { 118.1498622850, 1900.0198805641, 47.8439017411 },
        { 117.5588860658, 1902.5671918535, 47.6385088207 },
        { 116.9781879226, 1905.0702010914, 47.4365951465 },
        { 116.4074590624, 1907.5302392822, 47.2380589612 },
        { 115.8464037770, 1909.9485810295, 47.0428027026 },
        { 115.2947387317, 1912.3264476041, 46.8507327817 },
        { 114.7521923001, 1914.6650098095, 46.6617593752 },
        { 114.2185039429, 1916.9653906592, 46.4757962312 },
        { 113.6934236271, 1919.2286678824, 46.2927604865 },
        { 113.1767112814, 1921.4558762694, 46.1125724961 },
        { 112.6681362862, 1923.6480098692, 45.9351556725 },
        { 112.1674769961, 1925.8060240507, 45.7604363349 },
        { 111.6745202906, 1927.9308374365, 45.5883435678 },
        { 111.1890611529, 1930.0233337197, 45.4188090874 },
        { 110.7109022739, 1932.0843633705, 45.2517671163 },
        { 110.2398536796, 1934.1147452425, 45.0871542651 },
        { 109.7757323806, 1936.1152680831, 44.9249094213 },
        { 109.3183620417, 1938.0866919575, 44.7649736438 },
        { 108.8675726711, 1940.0297495894, 44.6072900641 },
        { 108.4232003266, 1941.9451476263, 44.4518037922 },
        { 107.9850868386, 1943.8335678331, 44.2984618286 },
        { 107.5530795491, 1945.6956682190, 44.1472129800 },
        { 107.1270310640, 1947.5320841029, 43.9980077806 },
        { 106.7067990201, 1949.3434291198, 43.8507984169 },
        { 106.2922458637, 1951.1302961731, 43.7055386568 },
        { 105.8832386418, 1952.8932583363, 43.5621837822 },
        { 105.4796488039, 1954.6328697067, 43.4206905253 },
        { 105.0813520143, 1956.3496662136, 43.2810170080 },
        { 104.6882279743, 1958.0441663861, 43.1431226846 },
        { 104.3001602534, 1959.7168720795, 43.0069682871 },
        { 103.9170361293, 1961.3682691663, 42.8725157732 },
        { 103.5387464354, 1962.9988281916, 42.7397282777 },
        { 103.1651854170, 1964.6090049953, 42.6085700647 },
        { 102.7962505932, 1966.1992413046, 42.4790064839 },
        { 102.4318426271, 1967.7699652965, 42.3510039277 },
        { 102.0718652010, 1969.3215921330, 42.2245297906 },
        { 101.7162248985, 1970.8545244713, 42.0995524312 },
        { 101.3648310918, 1972.3691529483, 41.9760411353 },
        { 101.0175958345, 1973.8658566439, 41.8539660808 },
        { 100.6744337591, 1975.3450035207, 41.7332983043 },
        { 100.3352619799, 1976.8069508446, 41.6140096693 },
        { 100.0000000000, 1978.2520455856, 41.4960728361 },
        { 99.6685696223, 1979.6806247999, 41.3794612321 },
        { 99.3408948649, 1981.0930159954, 41.2641490245 },
        { 99.0169018805, 1982.4895374799, 41.1501110937 },
        { 98.6965188787, 1983.8704986948, 41.0373230079 },
        { 98.3796760522, 1985.2362005332, 40.9257609988 },
        { 98.0663055064, 1986.5869356442, 40.8154019382 },
        { 97.7563411917, 1987.9229887247, 40.7062233161 },
        { 97.4497188388, 1989.2446367975, 40.5982032193 },
        { 97.1463758969, 1990.5521494783, 40.4913203109 },
        { 96.8462514743, 1991.8457892310, 40.3855538107 },
        { 96.5492862818, 1993.1258116125, 40.2808834767 },
        { 96.2554225782, 1994.3924655071, 40.1772895869 },
        { 95.9646041183, 1995.6459933514, 40.0747529224 },
        { 95.6767761028, 1996.8866313493, 39.9732547504 },
        { 95.3918851303, 1998.1146096792, 39.8727768085 },
        { 95.1098791513, 1999.3301526920, 39.7733012898 },
        { 94.8307074243, 2000.5334791017, 39.6748108278 },
        { 94.5543204729, 2001.7248021679, 39.5772884825 },
        { 94.2806700457, 2002.9043298715, 39.4807177269 },
        { 94.0097090766, 2004.0722650832, 39.3850824342 },
        { 93.7413916475, 2005.2288057255, 39.2903668650 },
        { 93.4756729524, 2006.3741449287, 39.1965556552 },
        { 93.2125092620, 2007.5084711803, 39.1036338051 },
        { 92.9518578910, 2008.6319684694, 39.0115866673 },
        { 92.6936771653, 2009.7448164250, 38.9203999369 },
        { 92.4379263916, 2010.8471904495, 38.8300596407 },
        { 92.1845658273, 2011.9392618471, 38.7405521273 },
        { 91.9335566521, 2013.0211979474, 38.6518640576 },
        { 91.6848609398, 2014.0931622243, 38.5639823955 },
        { 91.4384416325, 2015.1553144111, 38.4768943994 },
        { 91.1942625143, 2016.2078106103, 38.3905876130 },
        { 90.9522881868, 2017.2508034012, 38.3050498573 },
        { 90.7124840454, 2018.2844419415, 38.2202692230 },
        { 90.4748162563, 2019.3088720671, 38.1362340623 },
        { 90.2392517340, 2020.3242363874, 38.0529329815 },
        { 90.0057581203, 2021.3306743774, 37.9703548343 },
        { 89.7743037636, 2022.3283224669, 37.8884887144 },
        { 89.5448576986, 2023.3173141261, 37.8073239489 },
        { 89.3173896278, 2024.2977799487, 37.7268500922 },
        { 89.0918699020, 2025.2698477320, 37.6470569192 },
        { 88.8682695033, 2026.2336425541, 37.5679344197 },
        { 88.6465600269, 2027.1892868488, 37.4894727926 },
        { 88.4267136651, 2028.1369004776, 37.4116624399 },
        { 88.2087031903, 2029.0766007999, 37.3344939615 },
        { 87.9925019402, 2030.0085027398, 37.2579581498 },
        { 87.7780838021, 2030.9327188523, 37.1820459850 },
        { 87.5654231984, 2031.8493593856, 37.1067486296 },
        { 87.3544950724, 2032.7585323427, 37.0320574240 },
        { 87.1452748746, 2033.6603435401, 36.9579638816 },
        { 86.9377385495, 2034.5548966652, 36.8844596847 },
        { 86.7318625229, 2035.4422933318, 36.8115366800 },
        { 86.5276236889, 2036.3226331334, 36.7391868740 },
        { 86.3249993986, 2037.1960136952, 36.6674024298 },
        { 86.1239674478, 2038.0625307246, 36.5961756622 },
        { 85.9245060661, 2038.9222780594, 36.5254990348 },
        { 85.7265939059, 2039.7753477155, 36.4553651553 },
        { 85.5302100315, 2040.6218299324, 36.3857667730 },
        { 85.3353339094, 2041.4618132175, 36.3166967744 },
        { 85.1419453976, 2042.2953843890, 36.2481481803 },
        { 84.9500247365, 2043.1226286180, 36.1801141426 },
        { 84.7595525392, 2043.9436294683, 36.1125879406 },
        { 84.5705097827, 2044.7584689360, 36.0455629787 },
        { 84.3828777988, 2045.5672274873, 35.9790327827 },
        { 84.1966382657, 2046.3699840957, 35.9129909972 },
        { 84.0117731995, 2047.1668162774, 35.8474313829 },
        { 83.8282649465, 2047.9578001265, 35.7823478136 },
        { 83.6460961750, 2048.7430103484, 35.7177342738 },
        { 83.4652498680, 2049.5225202926, 35.6535848558 },
        { 83.2857093154, 2050.2964019846, 35.5898937576 },
        { 83.1074581074, 2051.0647261570, 35.5266552802 },
        { 82.9304801271, 2051.8275622791, 35.4638638251 },
        { 82.7547595438, 2052.5849785864, 35.4015138925 },
        { 82.5802808067, 2053.3370421087, 35.3396000784 },
        { 82.4070286380, 2054.0838186978, 35.2781170732 },
    };

    for ( size_t i = 0; i < 190; i++ )
        for ( size_t j = 0; j < 3; j++ )
        {
            if ( LAB[i][j] == 0 )
                OIIO_CHECK_LE( std::abs( LAB_test[i][j] ), 1e-7 );
            else
                OIIO_CHECK_EQUAL_THRESH( LAB_test[i][j], LAB[i][j], 1e-5 );
        }
}

void test_GetCalcXYZt()
{
    vector<vector<double>> RGB( 190, ( vector<double>( 3 ) ) );
    const double           BStart[6] = { 1.0, 0.0, 0.0, 1.0, 0.0, 0.0 };

    for ( size_t i = 0; i < 190; i++ )
        for ( size_t j = 0; j < 3; j++ )
            RGB[i][j] = 10.0 / static_cast<double>( i * j + 1 );
    vector<vector<double>> XYZ_test = getCalcXYZt( RGB, BStart );

    double XYZ[190][3] = {
        { 9.5264607457, 10.0000000000, 10.0882518435 },
        { 9.5258362215, 6.8400531595, 3.3627506145 },
        { 9.5257113166, 5.7226197269, 2.0176503687 },
        { 9.5256577860, 5.1570332444, 1.4411788348 },
        { 9.5256280468, 4.8158494171, 1.1209168715 },
        { 9.5256091218, 4.5876996165, 0.9171138040 },
        { 9.5255960199, 4.4244152044, 0.7760193726 },
        { 9.5255864118, 4.3017837542, 0.6725501229 },
        { 9.5255790645, 4.2063070287, 0.5934265790 },
        { 9.5255732639, 4.1298660962, 0.5309606233 },
        { 9.5255685683, 4.0672848448, 0.4803929449 },
        { 9.5255646892, 4.0151076015, 0.4386196454 },
        { 9.5255614308, 3.9709392457, 0.4035300737 },
        { 9.5255586552, 3.9330673802, 0.3736389572 },
        { 9.5255562624, 3.9002352702, 0.3478707532 },
        { 9.5255541783, 3.8714997447, 0.3254274788 },
        { 9.5255523468, 3.8461391483, 0.3057046013 },
        { 9.5255507247, 3.8235919190, 0.2882357670 },
        { 9.5255492779, 3.8034145289, 0.2726554552 },
        { 9.5255479795, 3.7852520212, 0.2586731242 },
        { 9.5255468078, 3.7688169539, 0.2460549230 },
        { 9.5255457451, 3.7538740762, 0.2346105080 },
        { 9.5255447769, 3.7402289979, 0.2241833743 },
        { 9.5255438910, 3.7277196876, 0.2146436562 },
        { 9.5255430775, 3.7162100085, 0.2058826907 },
        { 9.5255423277, 3.7055847444, 0.1978088597 },
        { 9.5255416346, 3.6957457301, 0.1903443744 },
        { 9.5255409919, 3.6866088094, 0.1834227608 },
        { 9.5255403942, 3.6781014224, 0.1769868744 },
        { 9.5255398371, 3.6701606745, 0.1709873194 },
        { 9.5255393165, 3.6627317793, 0.1653811778 },
        { 9.5255388290, 3.6557667923, 0.1601309816 },
        { 9.5255383715, 3.6492235757, 0.1552038745 },
        { 9.5255379413, 3.6430649450, 0.1505709230 },
        { 9.5255375360, 3.6372579616, 0.1462065485 },
        { 9.5255371536, 3.6317733442, 0.1420880541 },
        { 9.5255367921, 3.6265849746, 0.1381952307 },
        { 9.5255364499, 3.6216694818, 0.1345100246 },
        { 9.5255361254, 3.6170058900, 0.1310162577 },
        { 9.5255358174, 3.6125753197, 0.1276993904 },
        { 9.5255355246, 3.6083607320, 0.1245463191 },
        { 9.5255352460, 3.6043467096, 0.1215452029 },
        { 9.5255349804, 3.6005192684, 0.1186853158 },
        { 9.5255347270, 3.5968656951, 0.1159569177 },
        { 9.5255344851, 3.5933744053, 0.1133511443 },
        { 9.5255342537, 3.5900348217, 0.1108599104 },
        { 9.5255340324, 3.5868372666, 0.1084758263 },
        { 9.5255338203, 3.5837728682, 0.1061921247 },
        { 9.5255336170, 3.5808334785, 0.1040025963 },
        { 9.5255334219, 3.5780116012, 0.1019015338 },
        { 9.5255332345, 3.5753003274, 0.0998836816 },
        { 9.5255330544, 3.5726932795, 0.0979441927 },
        { 9.5255328812, 3.5701845609, 0.0960785890 },
        { 9.5255327144, 3.5677687116, 0.0942827275 },
        { 9.5255325538, 3.5654406686, 0.0925527692 },
        { 9.5255323989, 3.5631957302, 0.0908851517 },
        { 9.5255322495, 3.5610295245, 0.0892765650 },
        { 9.5255321053, 3.5589379810, 0.0877239291 },
        { 9.5255319661, 3.5569173052, 0.0862243747 },
        { 9.5255318315, 3.5549639552, 0.0847752256 },
        { 9.5255317014, 3.5530746214, 0.0833739822 },
        { 9.5255315755, 3.5512462076, 0.0820183077 },
        { 9.5255314537, 3.5494758140, 0.0807060147 },
        { 9.5255313357, 3.5477607222, 0.0794350539 },
        { 9.5255312213, 3.5460983807, 0.0782035027 },
        { 9.5255311104, 3.5444863929, 0.0770095561 },
        { 9.5255310029, 3.5429225049, 0.0758515176 },
        { 9.5255308985, 3.5414045956, 0.0747277914 },
        { 9.5255307972, 3.5399306666, 0.0736368748 },
        { 9.5255306989, 3.5384988339, 0.0725773514 },
        { 9.5255306033, 3.5371073194, 0.0715478854 },
        { 9.5255305103, 3.5357544437, 0.0705472157 },
        { 9.5255304200, 3.5344386196, 0.0695741506 },
        { 9.5255303321, 3.5331583456, 0.0686275636 },
        { 9.5255302465, 3.5319122000, 0.0677063882 },
        { 9.5255301633, 3.5306988363, 0.0668096149 },
        { 9.5255300822, 3.5295169777, 0.0659362866 },
        { 9.5255300032, 3.5283654128, 0.0650854958 },
        { 9.5255299262, 3.5272429916, 0.0642563812 },
        { 9.5255298511, 3.5261486216, 0.0634481248 },
        { 9.5255297779, 3.5250812642, 0.0626599493 },
        { 9.5255297065, 3.5240399315, 0.0618911156 },
        { 9.5255296369, 3.5230236832, 0.0611409203 },
        { 9.5255295689, 3.5220316236, 0.0604086937 },
        { 9.5255295025, 3.5210628992, 0.0596937979 },
        { 9.5255294377, 3.5201166964, 0.0589956248 },
        { 9.5255293743, 3.5191922388, 0.0583135945 },
        { 9.5255293124, 3.5182887852, 0.0576471534 },
        { 9.5255292520, 3.5174056279, 0.0569957731 },
        { 9.5255291928, 3.5165420905, 0.0563589488 },
        { 9.5255291350, 3.5156975265, 0.0557361980 },
        { 9.5255290784, 3.5148713172, 0.0551270593 },
        { 9.5255290231, 3.5140628708, 0.0545310910 },
        { 9.5255289689, 3.5132716206, 0.0539478708 },
        { 9.5255289159, 3.5124970236, 0.0533769939 },
        { 9.5255288640, 3.5117385596, 0.0528180725 },
        { 9.5255288132, 3.5109957298, 0.0522707349 },
        { 9.5255287634, 3.5102680556, 0.0517346248 },
        { 9.5255287146, 3.5095550780, 0.0512094002 },
        { 9.5255286669, 3.5088563562, 0.0506947329 },
        { 9.5255286200, 3.5081714669, 0.0501903077 },
        { 9.5255285741, 3.5075000032, 0.0496958219 },
        { 9.5255285291, 3.5068415744, 0.0492109846 },
        { 9.5255284849, 3.5061958044, 0.0487355162 },
        { 9.5255284416, 3.5055623317, 0.0482691476 },
        { 9.5255283991, 3.5049408083, 0.0478116201 },
        { 9.5255283574, 3.5043308994, 0.0473626847 },
        { 9.5255283165, 3.5037322822, 0.0469221016 },
        { 9.5255282764, 3.5031446462, 0.0464896398 },
        { 9.5255282369, 3.5025676919, 0.0460650769 },
        { 9.5255281982, 3.5020011308, 0.0456481984 },
        { 9.5255281602, 3.5014446844, 0.0452387975 },
        { 9.5255281229, 3.5008980843, 0.0448366749 },
        { 9.5255280862, 3.5003610714, 0.0444416381 },
        { 9.5255280502, 3.4998333958, 0.0440535015 },
        { 9.5255280147, 3.4993148160, 0.0436720859 },
        { 9.5255279799, 3.4988050987, 0.0432972182 },
        { 9.5255279457, 3.4983040188, 0.0429287312 },
        { 9.5255279121, 3.4978113586, 0.0425664635 },
        { 9.5255278790, 3.4973269075, 0.0422102588 },
        { 9.5255278465, 3.4968504622, 0.0418599662 },
        { 9.5255278145, 3.4963818257, 0.0415154397 },
        { 9.5255277830, 3.4959208077, 0.0411765381 },
        { 9.5255277520, 3.4954672240, 0.0408431249 },
        { 9.5255277216, 3.4950208960, 0.0405150676 },
        { 9.5255276916, 3.4945816511, 0.0401922384 },
        { 9.5255276621, 3.4941493220, 0.0398745132 },
        { 9.5255276331, 3.4937237466, 0.0395617719 },
        { 9.5255276045, 3.4933047680, 0.0392538982 },
        { 9.5255275763, 3.4928922339, 0.0389507793 },
        { 9.5255275486, 3.4924859968, 0.0386523059 },
        { 9.5255275213, 3.4920859135, 0.0383583720 },
        { 9.5255274944, 3.4916918453, 0.0380688749 },
        { 9.5255274679, 3.4913036576, 0.0377837148 },
        { 9.5255274419, 3.4909212197, 0.0375027950 },
        { 9.5255274162, 3.4905444048, 0.0372260216 },
        { 9.5255273908, 3.4901730898, 0.0369533035 },
        { 9.5255273659, 3.4898071551, 0.0366845522 },
        { 9.5255273413, 3.4894464847, 0.0364196817 },
        { 9.5255273170, 3.4890909658, 0.0361586088 },
        { 9.5255272931, 3.4887404887, 0.0359012521 },
        { 9.5255272696, 3.4883949470, 0.0356475330 },
        { 9.5255272464, 3.4880542372, 0.0353973749 },
        { 9.5255272234, 3.4877182586, 0.0351507033 },
        { 9.5255272009, 3.4873869133, 0.0349074458 },
        { 9.5255271786, 3.4870601062, 0.0346675321 },
        { 9.5255271566, 3.4867377446, 0.0344308937 },
        { 9.5255271349, 3.4864197385, 0.0341974639 },
        { 9.5255271135, 3.4861060002, 0.0339671779 },
        { 9.5255270924, 3.4857964443, 0.0337399727 },
        { 9.5255270716, 3.4854909878, 0.0335157869 },
        { 9.5255270511, 3.4851895498, 0.0332945605 },
        { 9.5255270308, 3.4848920515, 0.0330762356 },
        { 9.5255270108, 3.4845984161, 0.0328607552 },
        { 9.5255269911, 3.4843085689, 0.0326480642 },
        { 9.5255269716, 3.4840224371, 0.0324381088 },
        { 9.5255269523, 3.4837399496, 0.0322308366 },
        { 9.5255269333, 3.4834610374, 0.0320261963 },
        { 9.5255269145, 3.4831856329, 0.0318241383 },
        { 9.5255268960, 3.4829136703, 0.0316246139 },
        { 9.5255268777, 3.4826450857, 0.0314275758 },
        { 9.5255268596, 3.4823798164, 0.0312329778 },
        { 9.5255268418, 3.4821178013, 0.0310407749 },
        { 9.5255268242, 3.4818589811, 0.0308509231 },
        { 9.5255268068, 3.4816032976, 0.0306633795 },
        { 9.5255267896, 3.4813506941, 0.0304781022 },
        { 9.5255267726, 3.4811011154, 0.0302950506 },
        { 9.5255267558, 3.4808545073, 0.0301141846 },
        { 9.5255267392, 3.4806108173, 0.0299354654 },
        { 9.5255267228, 3.4803699937, 0.0297588550 },
        { 9.5255267066, 3.4801319864, 0.0295843163 },
        { 9.5255266905, 3.4798967461, 0.0294118130 },
        { 9.5255266747, 3.4796642250, 0.0292413097 },
        { 9.5255266591, 3.4794343762, 0.0290727719 },
        { 9.5255266436, 3.4792071537, 0.0289061657 },
        { 9.5255266283, 3.4789825130, 0.0287414582 },
        { 9.5255266132, 3.4787604102, 0.0285786171 },
        { 9.5255265982, 3.4785408026, 0.0284176108 },
        { 9.5255265834, 3.4783236483, 0.0282584085 },
        { 9.5255265688, 3.4781089066, 0.0281009801 },
        { 9.5255265544, 3.4778965373, 0.0279452960 },
        { 9.5255265401, 3.4776865013, 0.0277913274 },
        { 9.5255265259, 3.4774787606, 0.0276390461 },
        { 9.5255265119, 3.4772732776, 0.0274884246 },
        { 9.5255264981, 3.4770700156, 0.0273394359 },
        { 9.5255264844, 3.4768689390, 0.0271920535 },
        { 9.5255264709, 3.4766700127, 0.0270462516 },
        { 9.5255264575, 3.4764732023, 0.0269020049 },
        { 9.5255264442, 3.4762784742, 0.0267592887 },
        { 9.5255264311, 3.4760857956, 0.0266180787 },
    };

    for ( size_t i = 0; i < 190; i++ )
        for ( size_t j = 0; j < 3; j++ )
            OIIO_CHECK_EQUAL_THRESH( XYZ_test[i][j], XYZ[i][j], 1e-5 );
}

int main( int, char ** )
{
    test_IsSquare();
    test_AddVectors();
    test_SubVectors();
    test_Cross2();
    test_InvertVM();
    test_InvertV();
    test_DiagV();
    test_TransposeVec();
    test_SumVector();
    test_MulVectorElement();
    test_MulVector1();
    test_MulVector2();
    test_FindIndexInterp1();
    test_Interp1DLinear();
    testIDT_XytoXYZ();
    testIDT_Uvtoxy();
    testIDT_UvtoXYZ();
    testIDT_XYZTouv();
    testIDT_GetCAT();
    test_XYZtoLAB();
    test_GetCalcXYZt();

    return unit_test_failures;
}
